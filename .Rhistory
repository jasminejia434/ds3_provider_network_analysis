opacity = 1,
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 2,
color = "#666",
bringToFront = TRUE
),
label = ~Label,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "12px",
direction = "auto"
)
) %>%
addLegend(
"bottomright",
pal = colorNumeric("YlOrRd", gis_data$Combined_Density),
values = gis_data$Combined_Density,
title = "Density Metric",
opacity = 0.7
)
library(readr)
nhl_rate_Sheet1 <- read_csv("~/Desktop/mdishowcase/nhl rate - Sheet1.csv")
View(nhl_rate_Sheet1)
nhl_data <- read_csv("~/Desktop/mdishowcase/nhl rate - Sheet1.csv")
# Ensure FIPS codes are standardized to 5 digits in the NHL dataset
nhl_data <- nhl_data %>%
mutate(FIPS = sprintf("%05d", FIPS))
# Ensure FIPS codes are standardized to 5 digits in the merged dataset
merged_data <- merged_data %>%
mutate(`FIPS Code` = sprintf("%05d", `FIPS Code`))
nhl_data <- read_csv("~/Desktop/mdishowcase/nhl rate - Sheet1.csv")
# Ensure FIPS codes are standardized to 5 digits in the NHL dataset
# Ensure FIPS codes are standardized to 5 digits in the NHL dataset
nhl_data <- nhl_data %>%
mutate(FIPS = sprintf("%05d", as.numeric(FIPS)))  # Convert to numeric, then format
# Ensure FIPS codes are standardized to 5 digits in the merged dataset
merged_data <- merged_data %>%
mutate(`FIPS Code` = sprintf("%05d", as.numeric(`FIPS Code`)))  # Convert to numeric, then format
# Merge the datasets on the FIPS code
merged_data <- merged_data %>%
left_join(
nhl_data %>%
select(FIPS, `Age-Adjusted Incidence Rate([rate note]) - cases per 100,000`),
by = c("FIPS Code" = "FIPS")
)
merged_data <- merged_data %>%
select(-`FIPS Code`)
# Aggregate data to the state level
state_data <- merged_data %>%
group_by(State) %>%
summarise(
Aggregated_Weighted_Labor = sum(`Aggregated Weighted Labor 2017-2021`, na.rm = TRUE),
Aggregated_Certified_Workers = sum(`Aggregated Certified Workers (2017-2021)`, na.rm = TRUE),
Mean_NHL_Rate = mean(`Age-Adjusted Incidence Rate([rate note]) - cases per 100,000`, na.rm = TRUE)
)
# Aggregate data to the state level
state_data <- merged_data %>%
group_by(STATE_NAME) %>%
summarise(
Aggregated_Weighted_Labor = sum(`Aggregated Weighted Labor 2017-2021`, na.rm = TRUE),
Aggregated_Certified_Workers = sum(`Aggregated Certified Workers (2017-2021)`, na.rm = TRUE),
Mean_NHL_Rate = mean(`Age-Adjusted Incidence Rate([rate note]) - cases per 100,000`, na.rm = TRUE)
)
# Retrieve U.S. state geometries
state_shapes <- states(cb = TRUE, year = 2021, class = "sf")
# Merge state geometries with aggregated data
gis_data <- state_shapes %>%
left_join(state_data, by = c("STUSPS" = "State"))
View(h2_data)
# Aggregate data to the state level
state_data <- merged_data %>%
group_by(STATE_NAME) %>%
summarise(
Aggregated_Weighted_Labor = sum(`Aggregated Weighted Labor 2017-2021`, na.rm = TRUE),
Aggregated_Certified_Workers = sum(`Aggregated Certified Workers (2017-2021)`, na.rm = TRUE),
Mean_NHL_Rate = mean(`Age-Adjusted Incidence Rate([rate note]) - cases per 100,000`, na.rm = TRUE)
)
# Retrieve U.S. state geometries
state_shapes <- states(cb = TRUE, year = 2021, class = "sf")
# Merge state geometries with aggregated data
gis_data <- state_shapes %>%
left_join(state_data, by = c("STUSPS" = "STATE_NAME"))
# Fix CRS (ensure compatibility with Leaflet)
gis_data <- st_transform(gis_data, crs = 4326)
# Create a combined metric for color intensity
gis_data <- gis_data %>%
mutate(
Combined_Metric = scale(Aggregated_Weighted_Labor) +
scale(Aggregated_Certified_Workers) +
scale(Mean_NHL_Rate),
Label = paste0(
"<strong>State: </strong>", NAME, "<br>",
"<strong>Aggregated Weighted Labor: </strong>", round(Aggregated_Weighted_Labor, 2), "<br>",
"<strong>Aggregated Certified Workers: </strong>", Aggregated_Certified_Workers, "<br>",
"<strong>Mean NHL Rate: </strong>", round(Mean_NHL_Rate, 2)
)
)
# Create the interactive map
leaflet(gis_data) %>%
addProviderTiles(providers$CartoDB.Positron) %>% # Add a clean basemap
addPolygons(
fillColor = ~colorNumeric("YlOrRd", Combined_Metric)(Combined_Metric),
color = "black",
weight = 0.5,
opacity = 1,
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 2,
color = "#666",
bringToFront = TRUE
),
label = ~Label,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "12px",
direction = "auto"
)
) %>%
addLegend(
"bottomright",
pal = colorNumeric("YlOrRd", gis_data$Combined_Metric),
values = gis_data$Combined_Metric,
title = "Combined Metric",
opacity = 0.7
)
# Aggregate data to the state level
state_data <- merged_data %>%
group_by(STATE_NAME) %>%
summarise(
Aggregated_Weighted_Labor = sum(`Aggregated Weighted Labor 2017-2021`, na.rm = TRUE),
Aggregated_Certified_Workers = sum(`Aggregated Certified Workers (2017-2021)`, na.rm = TRUE),
Mean_NHL_Rate = mean(`Age-Adjusted Incidence Rate([rate note]) - cases per 100,000`, na.rm = TRUE)
)
# Retrieve U.S. state geometries
state_shapes <- states(cb = TRUE, year = 2021, class = "sf")
# Merge state geometries with aggregated data
gis_data <- state_shapes %>%
left_join(state_data, by = c("STUSPS" = "STATE_NAME"))
# Fix CRS (ensure compatibility with Leaflet)
gis_data <- st_transform(gis_data, crs = 4326)
# Ensure no NA values in the combined metric calculation
gis_data <- gis_data %>%
mutate(
Combined_Metric = scale(Aggregated_Weighted_Labor, center = TRUE, scale = TRUE) +
scale(Aggregated_Certified_Workers, center = TRUE, scale = TRUE) +
scale(Mean_NHL_Rate, center = TRUE, scale = TRUE)
) %>%
mutate(Combined_Metric = ifelse(is.na(Combined_Metric), 0, Combined_Metric))  # Replace NA with 0
# Check the range of Combined_Metric
range(gis_data$Combined_Metric, na.rm = TRUE)
# Create dynamic labels for the map
gis_data <- gis_data %>%
mutate(
Label = paste0(
"<strong>State: </strong>", NAME, "<br>",
"<strong>Aggregated Weighted Labor: </strong>", round(Aggregated_Weighted_Labor, 2), "<br>",
"<strong>Aggregated Certified Workers: </strong>", Aggregated_Certified_Workers, "<br>",
"<strong>Mean NHL Rate: </strong>", round(Mean_NHL_Rate, 2)
)
)
# Create the interactive map
leaflet(gis_data) %>%
addProviderTiles(providers$CartoDB.Positron) %>% # Add a clean basemap
addPolygons(
fillColor = ~colorNumeric("YlOrRd", Combined_Metric)(Combined_Metric),
color = "black",
weight = 0.5,
opacity = 1,
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 2,
color = "#666",
bringToFront = TRUE
),
label = ~Label,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "12px",
direction = "auto"
)
) %>%
addLegend(
"bottomright",
pal = colorNumeric("YlOrRd", gis_data$Combined_Metric),
values = gis_data$Combined_Metric,
title = "Combined Metric",
opacity = 0.7
)
# Aggregate data to the state level
state_data <- merged_data %>%
group_by(STATE_NAME) %>%  # Group by STATE_NAME
summarise(
Aggregated_Weighted_Labor = sum(`Aggregated Weighted Labor 2017-2021`, na.rm = TRUE),
Aggregated_Certified_Workers = sum(`Aggregated Certified Workers (2017-2021)`, na.rm = TRUE),
Mean_NHL_Rate = mean(`Age-Adjusted Incidence Rate([rate note]) - cases per 100,000`, na.rm = TRUE)
)
# Retrieve U.S. state geometries
state_shapes <- states(cb = TRUE, year = 2021, class = "sf")
# Merge state geometries with aggregated data
gis_data <- state_shapes %>%
left_join(state_data, by = c("NAME" = "STATE_NAME"))
# Check for unmatched rows (optional)
unmatched <- gis_data %>% filter(is.na(Aggregated_Weighted_Labor))
print(unmatched)
# Fix CRS (ensure compatibility with Leaflet)
gis_data <- st_transform(gis_data, crs = 4326)
# Create a combined metric for color intensity
gis_data <- gis_data %>%
mutate(
Combined_Metric = scale(Aggregated_Weighted_Labor, center = TRUE, scale = TRUE) +
scale(Aggregated_Certified_Workers, center = TRUE, scale = TRUE) +
scale(Mean_NHL_Rate, center = TRUE, scale = TRUE),
Label = paste0(
"<strong>State: </strong>", NAME, "<br>",
"<strong>Aggregated Weighted Labor: </strong>", round(Aggregated_Weighted_Labor, 2), "<br>",
"<strong>Aggregated Certified Workers: </strong>", Aggregated_Certified_Workers, "<br>",
"<strong>Mean NHL Rate: </strong>", round(Mean_NHL_Rate, 2)
)
)
# Create the interactive map
leaflet(gis_data) %>%
addProviderTiles(providers$CartoDB.Positron) %>% # Add a clean basemap
addPolygons(
fillColor = ~colorNumeric("YlOrRd", Combined_Metric)(Combined_Metric),
color = "black",
weight = 0.5,
opacity = 1,
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 2,
color = "#666",
bringToFront = TRUE
),
label = ~Label,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "12px",
direction = "auto"
)
) %>%
addLegend(
"bottomright",
pal = colorNumeric("YlOrRd", gis_data$Combined_Metric),
values = gis_data$Combined_Metric,
title = "Combined Metric",
opacity = 0.7
)
# Aggregate data to the state level
state_data <- merged_data %>%
group_by(STATE_NAME) %>%
summarise(
Aggregated_Weighted_Labor = sum(`Aggregated Weighted Labor 2017-2021`, na.rm = TRUE),
Aggregated_Certified_Workers = sum(`Aggregated Certified Workers (2017-2021)`, na.rm = TRUE),
Mean_NHL_Rate = mean(`Age-Adjusted Incidence Rate([rate note]) - cases per 100,000`, na.rm = TRUE)
)
# Check for NA values
print("State data summary:")
print(summary(state_data))
# Retrieve U.S. state geometries
state_shapes <- states(cb = TRUE, year = 2021, class = "sf")
# Merge state geometries with aggregated data
gis_data <- state_shapes %>%
left_join(state_data, by = c("NAME" = "STATE_NAME"))
# Check for unmatched rows and NA values
unmatched <- gis_data %>% filter(is.na(Aggregated_Weighted_Labor))
print("Unmatched rows:")
print(unmatched)
# Fix CRS (ensure compatibility with Leaflet)
gis_data <- st_transform(gis_data, crs = 4326)
# Create a combined metric for color intensity
gis_data <- gis_data %>%
mutate(
Combined_Metric = scale(Aggregated_Weighted_Labor, center = TRUE, scale = TRUE) +
scale(Aggregated_Certified_Workers, center = TRUE, scale = TRUE) +
scale(Mean_NHL_Rate, center = TRUE, scale = TRUE)
) %>%
mutate(Combined_Metric = ifelse(is.na(Combined_Metric), 0, Combined_Metric))  # Replace NA with 0
# Check range of Combined_Metric
print("Range of Combined_Metric:")
print(range(gis_data$Combined_Metric, na.rm = TRUE))
# Create dynamic labels for the map
gis_data <- gis_data %>%
mutate(
Label = paste0(
"<strong>State: </strong>", NAME, "<br>",
"<strong>Aggregated Weighted Labor: </strong>", round(Aggregated_Weighted_Labor, 2), "<br>",
"<strong>Aggregated Certified Workers: </strong>", Aggregated_Certified_Workers, "<br>",
"<strong>Mean NHL Rate: </strong>", round(Mean_NHL_Rate, 2)
)
)
# Create the interactive map
leaflet(gis_data) %>%
addProviderTiles(providers$CartoDB.Positron) %>% # Add a clean basemap
addPolygons(
fillColor = ~colorNumeric("YlOrRd", Combined_Metric)(Combined_Metric),
color = "black",
weight = 0.5,
opacity = 1,
fillOpacity = 0.7,
highlightOptions = highlightOptions(
weight = 2,
color = "#666",
bringToFront = TRUE
),
label = ~Label,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "12px",
direction = "auto"
)
) %>%
addLegend(
"bottomright",
pal = colorNumeric("YlOrRd", gis_data$Combined_Metric),
values = gis_data$Combined_Metric,
title = "Combined Metric",
opacity = 0.7
)
# Inspect column values
print("Unique state names in state_shapes:")
print(unique(state_shapes$NAME))
print("Unique state names in state_data:")
print(unique(state_data$STATE_NAME))
# Standardize case and trim whitespace in both datasets
state_data <- state_data %>%
mutate(STATE_NAME = str_trim(STATE_NAME))
state_shapes <- state_shapes %>%
mutate(NAME = str_trim(NAME))
# Reattempt merging state shapes with state data
gis_data <- state_shapes %>%
left_join(state_data, by = c("NAME" = "STATE_NAME"))
# Check for unmatched rows after the merge
unmatched <- gis_data %>% filter(is.na(Mean_NHL_Rate))
print("Unmatched rows after merge:")
print(unmatched)
View(state_data)
nhl_data <- read_csv("~/Desktop/mdishowcase/nhl rate - Sheet1.csv")
# Standardize FIPS codes to 5 digits (if needed)
nhl_data <- nhl_data %>%
mutate(FIPS = sprintf("%05d", as.numeric(FIPS)))
# Ensure the state column is correctly derived from the FIPS code
# Load a reference dataset of state FIPS codes and names (from tigris or another source)
state_fips <- tigris::states(cb = TRUE, year = 2021, class = "sf") %>%
as.data.frame() %>%
select(STATEFP, NAME) %>%
rename(State_Name = NAME)
# Derive the state FIPS code from the county FIPS code (first two digits)
nhl_data <- nhl_data %>%
mutate(STATEFP = substr(FIPS, 1, 2))
# Merge with state FIPS codes to get state names
nhl_data <- nhl_data %>%
left_join(state_fips, by = "STATEFP")
# Compute the state-level average NHL rate
state_nhl_rate <- nhl_data %>%
group_by(State_Name) %>%
summarise(
Mean_NHL_Rate = mean(
as.numeric(`Age-Adjusted Incidence Rate([rate note]) - cases per 100,000`),
na.rm = TRUE
)
)
View(state_nhl_rate)
nhl_data <- read_csv("~/Desktop/mdishowcase/nhl rate - Sheet1.csv")
# Standardize FIPS codes to 5 digits (if needed)
nhl_data <- nhl_data %>%
mutate(FIPS = sprintf("%05d", as.numeric(FIPS)))
# Ensure the state column is correctly derived from the FIPS code
# Load a reference dataset of state FIPS codes and names (from tigris or another source)
state_fips <- tigris::states(cb = TRUE, year = 2021, class = "sf") %>%
as.data.frame() %>%
select(STATEFP, NAME) %>%
rename(State_Name = NAME)
# Derive the state FIPS code from the county FIPS code (first two digits)
nhl_data <- nhl_data %>%
mutate(STATEFP = substr(FIPS, 1, 2))
# Merge with state FIPS codes to get state names
nhl_data <- nhl_data %>%
left_join(state_fips, by = "STATEFP")
# Compute the state-level average NHL rate
state_nhl_rate <- nhl_data %>%
group_by(State_Name) %>%
summarise(
Mean_NHL_Rate = mean(
as.numeric(`Age-Adjusted Incidence Rate([rate note]) - cases per 100,000`),
na.rm = TRUE
)
)
# Rename the column in state_nhl_rate to match state_data
state_nhl_rate <- state_nhl_rate %>%
rename(STATE_NAME = State_Name)
# Merge the two datasets on STATE_NAME
state_data <- state_data %>%
left_join(state_nhl_rate, by = "STATE_NAME")
nhl_data <- read_csv("~/Desktop/mdishowcase/nhl rate - Sheet1.csv")
# Standardize FIPS codes to 5 digits (if needed)
nhl_data <- nhl_data %>%
mutate(FIPS = sprintf("%05d", as.numeric(FIPS)))
# Ensure the state column is correctly derived from the FIPS code
# Load a reference dataset of state FIPS codes and names (from tigris or another source)
state_fips <- tigris::states(cb = TRUE, year = 2021, class = "sf") %>%
as.data.frame() %>%
select(STATEFP, NAME) %>%
rename(State_Name = NAME)
# Derive the state FIPS code from the county FIPS code (first two digits)
nhl_data <- nhl_data %>%
mutate(STATEFP = substr(FIPS, 1, 2))
# Merge with state FIPS codes to get state names
nhl_data <- nhl_data %>%
left_join(state_fips, by = "STATEFP")
# Compute the state-level average NHL rate
state_nhl_rate <- nhl_data %>%
group_by(State_Name) %>%
summarise(
Mean_NHL_Rate = mean(
as.numeric(`Age-Adjusted Incidence Rate([rate note]) - cases per 100,000`),
na.rm = TRUE
)
)
# Rename the column in state_nhl_rate to match state_data
state_nhl_rate <- state_nhl_rate %>%
rename(STATE_NAME = State_Name)
# Merge the two datasets on STATE_NAME
state_data <- state_data %>%
left_join(state_nhl_rate, by = "STATE_NAME")
# Remove Mean_NHL_Rate.x and rename Mean_NHL_Rate.y
state_data <- state_data %>%
select(-Mean_NHL_Rate.x) %>% # Drop the unwanted column
rename(Mean_NHL_Rate = Mean_NHL_Rate.y) # Rename the column
state_nhl_rate <- nhl_data %>%
group_by(State_Name) %>%
summarise(
Mean_NHL_Rate = mean(
as.numeric(`Age-Adjusted Incidence Rate([rate note]) - cases per 100,000`),
na.rm = TRUE
)
)
library(shiny)
library(leaflet)
library(dplyr)
library(sf)
# Load datasets
laborweight_data <- read_csv("~/Desktop/mdishowcase/aggregated_laborweight_by_county_2017_2021_with_FIPS (1).csv")
h2a_data <- read_csv("~/Desktop/mdishowcase/h2a_aggregated_certified_workers_2017_2021 (1).csv")
nhl_data <- read_csv("~/Desktop/mdishowcase/nhl rate - Sheet1.csv")
# Prepare combined dataset (assuming FIPS is the common column)
all_data <- laborweight_data %>%
select(FIPS, laborweight) %>%
left_join(h2a_data %>% select(FIPS, h2a_workers), by = "FIPS") %>%
left_join(nhl_data %>% select(FIPS, nhl_rate), by = "FIPS")
# Create cleaned 'county' and 'state' columns
data <- data %>%
mutate(
county = gsub(" County", "", `County, State`),    # Remove "County"
county = gsub(",.*$", "", county),               # Remove state abbreviation
county = tolower(county),                        # Convert to lowercase
state = toupper(sub(".*, ", "", `County, State`)) # Extract state abbreviation
)
# Retrieve official county FIPS codes
fips_codes <- counties(cb = TRUE, year = 2021) %>%
as.data.frame() %>%
select(STATEFP, COUNTYFP, NAME, STATE_NAME) %>%
mutate(
FIPS = paste0(STATEFP, COUNTYFP),
STATE_ABBR = state.abb[match(STATE_NAME, state.name)], # Convert state names to abbreviations
county = tolower(NAME),  # Convert county names to lowercase
state = toupper(STATE_ABBR)  # Ensure state abbreviations are uppercase
)
# Merge your dataset with the FIPS codes by 'county' and 'state'
merged_data <- data %>%
left_join(fips_codes, by = c("county", "state"))
merged_data <- merged_data %>%
select(-`FIPS Code`, -state)
h2a_data <- read_csv("~/Desktop/mdishowcase/h2a_aggregated_certified_workers_2017_2021 (1).csv")
# Merge the datasets by FIPS Code
merged_data <- merged_data %>%
left_join(h2a_data, by = "County, State")
nhl_data <- read_csv("~/Desktop/mdishowcase/nhl rate - Sheet1.csv")
# Standardize FIPS codes to 5 digits (if needed)
nhl_data <- nhl_data %>%
mutate(FIPS = sprintf("%05d", as.numeric(FIPS)))
# Ensure the state column is correctly derived from the FIPS code
# Load a reference dataset of state FIPS codes and names (from tigris or another source)
state_fips <- tigris::states(cb = TRUE, year = 2021, class = "sf") %>%
as.data.frame() %>%
select(STATEFP, NAME) %>%
rename(State_Name = NAME)
# Derive the state FIPS code from the county FIPS code (first two digits)
nhl_data <- nhl_data %>%
mutate(STATEFP = substr(FIPS, 1, 2))
# Merge with state FIPS codes to get state names
nhl_data <- nhl_data %>%
left_join(state_fips, by = "STATEFP")
# Compute the state-level average NHL rate
state_nhl_rate <- nhl_data %>%
group_by(State_Name) %>%
summarise(
Mean_NHL_Rate = mean(
as.numeric(`Age-Adjusted Incidence Rate([rate note]) - cases per 100,000`),
na.rm = TRUE
)
)
# Rename the column in state_nhl_rate to match state_data
state_nhl_rate <- state_nhl_rate %>%
rename(STATE_NAME = State_Name)
# Merge the two datasets on STATE_NAME
state_data <- state_data %>%
left_join(state_nhl_rate, by = "STATE_NAME")
# Remove Mean_NHL_Rate.x and rename Mean_NHL_Rate.y
state_data <- state_data %>%
select(-Mean_NHL_Rate.x) %>% # Drop the unwanted column
rename(Mean_NHL_Rate = Mean_NHL_Rate.y) # Rename the column.
